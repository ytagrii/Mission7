@page "/admin/purchases"
@inherits OwningComponentBase<ICheckoutRepository>

<!--THIS PAGE IMPORTS TEH SAME PURCHASETable.razor TO BUILD THESE 2 TABLES. WE PASS the tables-->
@*PARAMETERS to make the table custom*@
<PurchaseTable TableTitle="Unshipped Purchases" Purchases="UnShippedPurchases" ButtonLabel="Shipped"
               PurchaseSelected="ShipPurchase">

</PurchaseTable>

<PurchaseTable TableTitle="Shipped Purchases" Purchases="ShippedPurchases" ButtonLabel="Reset"
               PurchaseSelected="ResetPurchase">

</PurchaseTable>

<button class="btn btn-info" @onclick="@(x => UpdateData())">Refresh Data</button>

@*CODE BELOW GETS THE DATA*@
@code{
    public ICheckoutRepository repo => Service;

    public IEnumerable<Checkout> AllPurchases { get; set; }
    public IEnumerable<Checkout> UnShippedPurchases { get; set; }
    public IEnumerable<Checkout> ShippedPurchases { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        AllPurchases = await repo.checkouts.ToListAsync();
        UnShippedPurchases = AllPurchases.Where(x => !x.Shipped);
        ShippedPurchases = AllPurchases.Where(x => x.Shipped);
    }

    public void ShipPurchase(int id) => UpdatePurchase(id, true);
    public void ResetPurchase(int id) => UpdatePurchase(id, false);

    public void UpdatePurchase(int id, bool shipped)
    {
        Checkout c = repo.checkouts.FirstOrDefault(x => x.checkoutId == id);
        c.Shipped = shipped;
        repo.SavePurchase(c);

    }
    
}